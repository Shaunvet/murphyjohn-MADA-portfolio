---
title: "fitting-exercise"
author: "Murphy John"
format: html
editor: visual
---

# Exercise 1

## Setup

```{r}
# load packages
library(ggplot2)
library(dplyr)
```

```{r}
# load data
dat <- read.csv(
  here::here("fitting-exercise/data/Mavoglurant_A2121_nmpk.csv")
  )

names(dat) <- tolower(names(dat))
```

## Initial EDA

```{r, fig.width=10, fig.height=5}
# plot time by dv for each id, stratified by dose
plot <- ggplot(dat) +
  geom_line(aes(x=time, y=dv, group=id)) +
  facet_wrap(~dose)

print(plot)
```

## Initial processing

```{r}
# keep only obs where occ=1
dat1 <- dat %>%
  filter(occ == 1)
```

```{r}
# exclude obs where time=0, sum dv for each id
dat2 <- dat1 %>%
  filter(time != 0) %>%
  group_by(id) %>%
  summarize(
    Y = sum(dv)
  )

# create df with time=0 obs only
dat3 <- dat1 %>%
  filter(time == 0)

# join by id
dat4 <- full_join(x=dat2, y=dat3, by="id")
```

```{r}
# convert race and sex to factors
# keep only Y, dose, age, sex, race, wt, ht
dat5 <- dat4 %>%
  mutate(
    race = factor(race),
    sex = factor(sex)
  ) %>%
  select(
    Y, dose, age, sex, race, wt, ht
  )

str(dat5)
```

## EDA

```{r}
# participant demographics by dose
table1 <- dat5 %>%
  gtsummary::tbl_summary(
    include = c(age, sex, race, wt, ht),
    by = dose
  ) %>%
  gtsummary::as_kable()

print(table1)
```

```{r, fig.width=3, fig.height=3}
# plot Y by dose
plot1 <- ggplot(dat5) +
  geom_boxplot(aes(x=factor(dose), y=Y))

print(plot1)
```

Boxplot of dose by Y should 2 individuals of dose 25 with higher Y values, 1 individual od dose 50 with higher Y value.

```{r, fig.width=3, fig.height=3}
# plot Y by age
plot2 <- ggplot(dat5) +
  geom_point(aes(x=age, y=Y))

print(plot2)
```

Scatterplot of age by Y appears randomly distributed.

```{r, fig.width=3, fig.height=3}
# plot Y by sex
plot3 <- ggplot(dat5) +
  geom_boxplot(aes(x=sex, y=Y))

print(plot3)
```

Boxplot of sex by Y shows one individual of sex 1 and one individual of sex 2 with higher values of Y.

```{r, fig.width=3, fig.height=3}
# distribution of Y
hist1 <- ggplot(dat5) +
  geom_histogram(aes(Y))

print(hist1)
```

Histogram of Y is right-skewed with some high-value outliers.

```{r, fig.width=3, fig.height=3}
# distribution of dose
bar1 <- ggplot(dat5) +
  geom_bar(aes(factor(dose)))

print(bar1)
```

Bar plot of dose shows that more individuals recieve dose 25 or 50 than dose 37.5.

```{r, fig.width=3, fig.height=3}
# distribution of age
hist2 <- ggplot(dat5) +
  geom_histogram(aes(age))

print(hist2)
```

Histogram of age appears multimodal. Most individuals are either late-20s or late-30s.

```{r, fig.width=3, fig.height=3}
# distribution of sex
bar2 <- ggplot(dat5) +
  geom_bar(aes(sex))

print(bar2)
```

Bar plot of sex shows that most individuals are of sex 1.

```{r, fig.width=3, fig.height=3}
# distribution of race
bar3 <- ggplot(dat5) +
  geom_bar(aes(race))

print(bar3)
```

Bar plot of race shows that most individuals are of race 1. Some are of race 2 and few are of races 7 and 88.

```{r, fig.width=3, fig.height=3}
# distribution of wt
hist3 <- ggplot(dat5) +
  geom_histogram(aes(wt))

print(hist3)
```

Histogram of weight shows a normal distribution.

```{r, fig.width=3, fig.height=3}
# distribution of ht
hist4 <- ggplot(dat5) +
  geom_histogram(aes(ht))

print(hist4)
```

Histogram of height shows normal to slightly left-skewed distribution.

```{r, fig.width=3, fig.height=3}
plot4 <- ggplot(dat5) +
  geom_boxplot(aes(x=sex, y=wt))

print(plot4)
```

Boxplot of sex by height shows that sex 1 has larger values for weight than sex 2

```{r, fig.width=3, fig.height=3}
plot5 <- ggplot(dat5) +
  geom_boxplot(aes(x=sex, y=ht))

print(plot5)
```

Boxplot of sex by height shows that sex 1 has larger values for height than sex 2

```{r, fig.height=10, fig.width=10}
# pair plot
pairs(dat5)
```

Pair plot shows general relationships between variables. Y seems positively associated with dose. Weight and height show a positive linear relationship.

## Model Fitting

### linear models

```{r}
# linear model to Y using dose
fit1 <- parsnip::linear_reg() %>%
  parsnip::fit(
    Y ~ dose, 
    data=dat5
  )

broom::tidy(fit1)

# predict Y
fit1_pred <- predict(
  fit1,
  new_data=dat5
)

# combine real data with predictions
fit1_result <- dat5 %>%
  select(Y, dose) %>%
  bind_cols(fit1_pred)

# calculate rmse
fit1_result %>%
  yardstick::rmse(
    truth=Y, 
    estimate=.pred
  )

# calculate R squared
fit1_result %>%
  yardstick::rsq(
    truth=Y, 
    estimate=.pred
  )
```

RMSE = 666 and R-squared = 0.516

```{r}
# linear model to Y using all predictors
fit2 <- parsnip::linear_reg() %>%
  parsnip::fit(
    Y ~ dose + age + sex + race + wt + ht, 
    data=dat5
  )

broom::tidy(fit2)

# predict Y
fit2_pred <- predict(
  fit2,
  new_data=dat5
)

# combine real data with predictions
fit2_result <- dat5 %>%
  select(Y, dose, age, sex, race, wt, ht) %>%
  bind_cols(fit2_pred)

# calculate rmse
fit2_result %>%
  yardstick::rmse(
    truth=Y, 
    estimate=.pred
  )

# calculate R squared
fit2_result %>%
  yardstick::rsq(
    truth=Y, 
    estimate=.pred
  )
```

RMSE = 591 and R-squared = 0.619

The full model, with all predictors included, has a lower RMSE, which indicated lower error, then the reduced model, with dose as the only predictor. The full model also has a higher R-squared value, indicating a better fit then the reduced model.

### logistic models

```{r}
# logistic model to sex using dose
fit3 <- parsnip::logistic_reg() %>%
  parsnip::fit(
    sex ~ dose, 
    data=dat5
  )

broom::tidy(fit3)

# predict sex
fit3_pred <- predict(
  fit3,
  new_data=dat5
)

# get prediction probabilities
fit3_prob <- predict(
  fit3,
  new_data = dat5,
  type = "prob"
)

# combine real data with predictions
fit3_result <- dat5 %>%
  select(sex, dose) %>%
  bind_cols(fit3_pred, fit3_prob)

# compute accuracy
yardstick::accuracy(
  fit3_result, 
  truth = sex,
  estimate = .pred_class
)

# compute ROC-AUC
yardstick::roc_auc(
  fit3_result, 
  truth=sex, 
  .pred_1
)
```

The model classification accuracy is about 86.7%.

The model has a ROC-AUC of 0.592 indicating predictive performance is low, just slightly better than random guessing.

```{r}
# logistic model to sex using all predictors
fit4 <- parsnip::logistic_reg() %>%
  parsnip::fit(
    sex ~ Y + dose + age + race + wt + ht, 
    data=dat5
  )

broom::tidy(fit4)

# predict sex
fit4_pred <- predict(
  fit4,
  new_data=dat5
)

# get prediction probabilities
fit4_prob <- predict(
  fit4,
  new_data = dat5,
  type = "prob"
)

# combine real data with predictions
fit4_result <- dat5 %>%
  select(sex, Y, dose, age, race, wt, ht) %>%
  bind_cols(fit4_pred, fit4_prob)

# compute accuracy
yardstick::accuracy(
  fit4_result, 
  truth = sex,
  estimate = .pred_class
)

# compute ROC-AUC
yardstick::roc_auc(
  fit4_result, 
  truth=sex, 
  .pred_1
)
```

The model classification accuracy is about 94.7%.

The model has a ROC-AUC of 0.980 indicating overall good predictive performance.

# Exercise 2

## Setup

```{r}
# set seed
rngseed = 1234
```

```{r}
# remove race variable
dat6 <- dat5 %>%
  select(!race)
```

```{r}
set.seed(rngseed)

# put 75% of the data into the training set 
data_split <- rsample::initial_split(dat6, prop = 3/4)

# Create data frames for the two sets:
train_data <- rsample::training(data_split)
test_data  <- rsample::testing(data_split)
```

## Model Fitting

### Part 1

```{r}
# linear model to Y using dose
fit5 <- parsnip::linear_reg() %>%
  parsnip::fit(
    Y ~ dose, 
    data=train_data
  )

broom::tidy(fit5)

# predict Y
fit5_pred <- predict(
  fit5,
  new_data=train_data
)

# combine real data with predictions
fit5_result <- train_data %>%
  select(Y, dose) %>%
  bind_cols(fit5_pred)

# calculate rmse
fit5_result %>%
  yardstick::rmse(
    truth=Y, 
    estimate=.pred
  )

# calculate R squared
fit5_result %>%
  yardstick::rsq(
    truth=Y, 
    estimate=.pred
  )
```

RMSE = 703 and R-squared = 0.451

```{r}
# linear model to Y using all predictors
fit6 <- parsnip::linear_reg() %>%
  parsnip::fit(
    Y ~ dose + age + sex + wt + ht, 
    data=train_data
  )

broom::tidy(fit6)

# predict Y
fit6_pred <- predict(
  fit6,
  new_data=train_data
)

# combine real data with predictions
fit6_result <- train_data %>%
  select(Y, dose, age, sex, wt, ht) %>%
  bind_cols(fit6_pred)

# calculate rmse
fit6_result %>%
  yardstick::rmse(
    truth=Y, 
    estimate=.pred
  )

# calculate R squared
fit6_result %>%
  yardstick::rsq(
    truth=Y, 
    estimate=.pred
  )
```

RMSE = 627 and R-squared = 0.562

```{r}
# compute rmse of null model

null <- parsnip::null_model() %>%
  parsnip::set_engine("parsnip") %>%
  parsnip::set_mode("regression") %>%
  parsnip::fit(Y ~ ., data = train_data)

# predict Y
null_pred <- predict(
  null,
  new_data=train_data
)

# combine real data with predictions
null_result <- train_data %>%
  select(Y) %>%
  bind_cols(null_pred)

# calculate rmse
null_result %>%
  yardstick::rmse(
    truth=Y, 
    estimate=.pred
  )
```

RMSE = 948

#### Results

The RMSE of the full model is the lowest, at 627. This indicates that the full model is predicting values closer to the actual data than both the null and univariate models.

### Part 2

```{r}
# setup

# fit model with resampling
set.seed(rngseed)

# define linear model specification
model_spec <- parsnip::linear_reg() %>% 
  parsnip::set_engine("lm") %>% 
  parsnip::set_mode("regression")

# define null model specification
null_spec <- parsnip::null_model() %>%
  parsnip::set_engine("parsnip") %>%
  parsnip::set_mode("regression")

# create folds
folds <- rsample::vfold_cv(train_data, v = 10)
```

```{r}
# linear model to Y using dose
fit_wf1 <- workflows::workflow() %>%
  workflows::add_model(model_spec) %>%
  workflows::add_formula(Y ~ dose)

fit_rs1 <- fit_wf1 %>%
  tune::fit_resamples(folds)

tune::collect_metrics(fit_rs1)
```

RMSE = 691, SE = 67.5; R-squared = 0.512, SE = 0.0592

```{r}
# linear model to Y using all predictors
fit_wf2 <- workflows::workflow() %>%
  workflows::add_model(model_spec) %>%
  workflows::add_formula(Y ~ dose + age + sex + wt + ht)

fit_rs2 <- fit_wf2 %>%
  tune::fit_resamples(folds)

tune::collect_metrics(fit_rs2)
```

RMSE = 646, SE = 64.8; R-squared = 0.573, SE = 0.0686

```{r}
# null model
fit_wf_null <- workflows::workflow() %>%
  workflows::add_model(null_spec) %>%
  workflows::add_formula(Y ~ .)

fit_rs_null <- fit_wf_null %>%
  tune::fit_resamples(folds)

tune::collect_metrics(fit_rs_null)
```

RMSE = 933, SE = 76.7

#### Results

The original RMSE value for the univariate model was 703, compared to the new value of 691. Using the cross-validation method to evaluate this model resulted in a better estimated fit. The standard error is 67.5, which is relatively large. This indicates that the RMSE varies considerably across folds, possibly suggesting an unstable model or high data variability.

The original RMSE value for the full model was 627, compared to the new value of 646. Using the cross-validation method to evaluate this model resulted in a weaker estimated fit. The standard error is 64.8, which is relatively large. This indicates that the RMSE varies considerably across folds, possibly suggesting an unstable model or high data variability.

The RMSE values for the null model are similar.

### Changing the seed

```{r}
# setup

# fit model with resampling
set.seed(333)

# define linear model specification
model_spec <- parsnip::linear_reg() %>% 
  parsnip::set_engine("lm") %>% 
  parsnip::set_mode("regression")

# define null model specification
null_spec <- parsnip::null_model() %>%
  parsnip::set_engine("parsnip") %>%
  parsnip::set_mode("regression")

# create folds
folds <- rsample::vfold_cv(train_data, v = 10)
```

```{r}
# linear model to Y using dose
fit_wf1 <- workflows::workflow() %>%
  workflows::add_model(model_spec) %>%
  workflows::add_formula(Y ~ dose)

fit_rs1 <- fit_wf1 %>%
  tune::fit_resamples(folds)

tune::collect_metrics(fit_rs1)
```

RMSE = 706, SE = 48.1; R-squared = 0.484

```{r}
# linear model to Y using all predictors
fit_wf2 <- workflows::workflow() %>%
  workflows::add_model(model_spec) %>%
  workflows::add_formula(Y ~ dose + age + sex + wt + ht)

fit_rs2 <- fit_wf2 %>%
  tune::fit_resamples(folds)

tune::collect_metrics(fit_rs2)
```

RMSE = 645, SE = 52.7; R-squared = 0.566, SE = 0.0619

```{r}
# null model
fit_wf_null <- workflows::workflow() %>%
  workflows::add_model(null_spec) %>%
  workflows::add_formula(Y ~ .)

fit_rs_null <- fit_wf_null %>%
  tune::fit_resamples(folds)

tune::collect_metrics(fit_rs_null)
```

RMSE = 936, SE = 69.1

#### Results

Changing the seed results in different RMSE and SE values. For the univariate model, the new RMSE = 706, SE = 48.1; compared to the previous RMSE = 691, SE = 67.5. Note that if we had originally used this seed, we would have concluded that using cross-validation increases the RMSE for this model. For the full model, the new RMSe = 645, SE = 52.7; compared to the previous RMSE = 646, SE = 64.8. For the null model, the new RMSE = 936, SE = 69.1; compared to the previous RMSE = 933, SE = 76.7.